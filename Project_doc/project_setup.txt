

OrderService(grpc, rest, mcp tool, graphiql) project setup
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. download project from github
2. import in intelij IDE
3. mvn clean package
4. run the project
   mvn spring-boot:run
   java -jar target/orders-grpc-h2-0.0.1-SNAPSHOT.jar

#Opne H2 console in webbrowser
++++++++++++++++++++++++++++++++++++
http://localhost:8080/h2-console
edit : JDBC URL : jdbc:h2:mem:ordersdb
click on connect

#Testing with Postman(grpc, rest API, mcp tool server, graphiql)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#1.gRPC requests in Postman
+++++++++++++++++++++++++++++++++++
1. Open Postman → Import → choose order.proto (the file in src/main/proto) and import it.
2. Create a new gRPC Request (New → gRPC Request).
3. Set request URL to localhost:8080 and Connect.
4. In the service/method dropdown you’ll see order.OrderService. Choose:

   CreateOrder
   GetOrderById
   ListOrdersByDateRange
   UpdateOrder
   DeleteOrder

5. For each method, set the request body as JSON matching the proto message. Examples below — paste into the body and press Invoke.

Examples:
CreateOrder (body JSON):
{
  "order": {
    "customerId":"cust-1",
    "items":[{"productId":"p1","quantity":2,"price":100}],
    "status":"NEW"
  }
}


#2. Native Rest requests in Postman
+++++++++++++++++++++++++++++++++++
Create (POST)
POST http://localhost:8080/api/orders
Body (JSON):

{
  "customerId":"cust-1",
  "items":[{"productId":"p1","quantity":2,"price":100}],
  "status":"NEW"
}


#3 MCP Testing in postman
+++++++++++++++++++++++++++++++++++++
1. Create collection and create request and choose MCP
2. provide URL as http://localhost:8080/sse
3. select MCP and click connect
4. it will fetch all tools list 
5. select tool and set data and click run 
6. get response in response section


#4 GraphQl Request Testing in Postman
++++++++++++++++++++++++++++++++++++++++++
1. Import file from location /resources/graphiql/order.graphqls
2. Rename collection if required
3. set URL : http://localhost:8080/graphql
    Content-Type: application/json
4. Open request fill data in graphql variables
5. Click send to invoke the request

Note : to open in browser to test graphiql
http://localhost:8080/graphiql

#Create Order
mutation {
  createOrder(customerName: "Pankaj", product: "Laptop", quantity: 2, price: 100) {
    id
    customerId
    totalAmount
    status
    createdAt
    updatedAt
    items {
      productId
      quantity
      price
    }
  }
}


#Get Order By ID
{
  getOrderById(id: "507ad070-1426-4e31-ad56-ff58c2088b48"){
    id
    customerId
    totalAmount
    status
    createdAt
    updatedAt
    items {
      productId
      quantity
      price
    }
  }
}

#List Orders by Date Range
query {
  listOrdersByDate(startDate: "2025-09-20", endDate: "2025-09-21") {
    id
    customerId
    totalAmount
    status
    createdAt
    updatedAt
    items {
      productId
      quantity
      price
    }
  }
}

#Update Order
mutation {
  updateOrder(id: "c4ca4ab8-43db-43cd-beb3-7089f9732672", customerName: "Mohan", product: "Mobile", quantity: 5, price: 200) {
    id
    customerId
    totalAmount
    status
    createdAt
    updatedAt
    items {
      productId
      quantity
      price
    }
  }
}

#Delete Order
mutation {
  deleteOrder(id: "c4ca4ab8-43db-43cd-beb3-7089f9732672")
}
